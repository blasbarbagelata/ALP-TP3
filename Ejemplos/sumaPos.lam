def suma = \x:Nat.\y:Nat. R y (\x:Nat.\y:Nat.suc x) x
def sumaUno = \xs:LNat. RL nil (\x:Nat.\ys:LNat.\zs:LNat. cons (suc x) zs) xs
def sumPos = \xs:LNat. RL nil (\x:Nat.\ys:LNat.\zs:LNat. cons (suc x) (sumaUno zs)) xs

-- Definiciones de prueba
def singleton = \x:Nat.cons x nil
def sum = \xs:LNat. RL 0 (\x:Nat.\ys:LNat.\z:Nat. suma x z) xs
def concat = \xs:LNat.\ys:LNat. RL (ys) (\x:Nat.\zs:LNat.\ws:LNat. cons x ws) xs